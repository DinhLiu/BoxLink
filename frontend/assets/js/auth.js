// import { auth,
//     createUserWithEmailAndPassword,
//     applyActionCode,
//     signInWithEmailAndPassword,
//     sendPasswordResetEmail
// } from "../../config/firebaseConfig.js";
//
// window.showOnly = function (id) {
//     const listForm = ['logInForm', 'signUpForm', 'resetPasswordForm'];
//     listForm.forEach((form) => {
//         if (form === id) {
//             document.getElementById(form).style.display = 'block';
//         } else {
//             document.getElementById(form).style.display = 'none';
//         }
//     });
// }
//
// document.addEventListener("DOMContentLoaded", function () {
//     document.addEventListener("submit", async function (event) { // üõ†Ô∏è Th√™m async v√†o ƒë√¢y
//         event.preventDefault(); // NgƒÉn ch·∫∑n reload trang
//
//         let form = event.target; // X√°c ƒë·ªãnh form n√†o ƒë∆∞·ª£c submit
//         let formData = new FormData(form);
//
//         switch (form.id) {
//             case "logInForm":
//                 await logIn(formData);
//                 break;
//             case "inputSignUpForm":
//                 confirmSignUp();  // Chuy·ªÉn sang m√†ng h√¨nh x√°c nh·∫≠n
//                 await requestSignUp(formData); // üõ†Ô∏è G·ªçi h√†m async v·ªõi await
//                 break;
//             case "confirmSignUpForm":
//                 await confirmCodeSignUp(formData);
//                 break;
//             case "inputEmailForm":
//                 switchForm();  // Chuy·ªÉn sang m√†ng h√¨nh nh·∫≠p m√£ x√°c nh·∫≠n
//                 await sendCode(formData);
//                 break;
//             case "confirmCodeForm":
//                 switchForm();  // Chuyern sang m√†ng h√¨nh c√†i ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
//                 await confirmCode(formData);
//                 break;
//             case "newPasswordForm":
//                 await confirmResetPassword(formData);
//                 break;
//             default:
//                 console.warn("Form kh√¥ng x√°c ƒë·ªãnh:", form.id);
//         }
//     });
// });
//
// window.confirmSignUp = function () {
//     const signUpForm = document.getElementById('inputSignUpForm');
//     const confirmSignUpForm = document.getElementById('confirmSignUpForm');
//
//     confirmSignUpForm.style.display = 'block';
//     signUpForm.style.display = 'none';
// }
//
// window.switchForm = function () {
//     const listFormResetPassword = ['inputEmailForm', 'confirmCodeForm', 'newPasswordForm'];
//
//     for (let i = 0; i < listFormResetPassword.length; i++) {
//         const curForm = document.getElementById(listFormResetPassword[i]);
//          if (curForm && window.getComputedStyle(curForm).display !== 'none') {
//             if (i !== listFormResetPassword.length - 1) {
//                 curForm.style.display = 'none';
//                 let nextForm = document.getElementById(listFormResetPassword[(i + 1) % listFormResetPassword.length]);
//                 if (nextForm) nextForm.style.display = 'block';
//                 break;
//             }
//         }
//     }
// }
//
// window.resendCode = function () {
//     sendCode(".");
// }
//
// // C√°c h√†m x·ª≠ l√Ω form
// window.logIn = async function (formData) {
//     const email = formData.get("email");
//     const password = formData.get("password");
//     // Th√™m logic x·ª≠ l√Ω ƒëƒÉng nh·∫≠p
//
//     try {
//         // G·ª≠i request ƒëƒÉng nh·∫≠p l√™n Firebase
//         const userCredential = await signInWithEmailAndPassword(auth, email, password);
//         const user = userCredential.user;
//
//         console.log("ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", user);
//         alert(`Ch√†o m·ª´ng, ${user.email}!`);
//
//         // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ch√≠nh sau khi ƒëƒÉng nh·∫≠p
//         window.location.href = "index.html";
//     } catch (error) {
//         console.error("L·ªói ƒëƒÉng nh·∫≠p:", error.message);
//         alert("Sai email ho·∫∑c m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.");
//     }
// }
//
// window.requestSignUp = async function (formData) {
//     const email =  formData.get("email");
//     const password = formData.get("password");
//     const confirmPassword = formData.get("confirm password");
//
//     if (password !== confirmPassword) {
//         alert("M·∫≠t kh·∫©u kh√¥ng kh·ªõp. Vui l√≤ng nh·∫≠p l·∫°i.");
//         return;
//     }
//
//     try {
//         const userCredential = await createUserWithEmailAndPassword(auth, email, password);
//         const user = userCredential.user;
//
//         console.log("User registered successfully:", user);
//         sendCode(email).then(() => console.log("M√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i!"));
//     } catch (error) {
//         console.error("Error during sign-up:", error.message);
//         alert("ƒêƒÉng k√Ω th·∫•t b·∫°i: " + error.message);
//     }
// }
//
// window.confirmCodeSignUp = async function (formData) {
//     const code =  formData.get("confirmation code");
//     // Th√™m logic x√°c nh·∫≠n m√£ ƒëƒÉng k√Ω
//
//     try {
//         // G·ª≠i m√£ x√°c nh·∫≠n l√™n Firebase
//         await applyActionCode(auth, code);
//         alert("X√°c nh·∫≠n th√†nh c√¥ng! T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.");
//
//         // Chuy·ªÉn h∆∞·ªõng v·ªÅ l·∫°i trang ƒëƒÉng nh·∫≠p
//         window.location.href = "auth.html";
//     } catch (error) {
//         console.error("L·ªói x√°c nh·∫≠n m√£:", error.message);
//         alert("M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
//     }
// }
//
// window.sendCode = async function (formData) {
//     const email = formData.get("email");
//     // Th√™m logic g·ª≠i m√£ reset m·∫≠t kh·∫©u
//
//     try {
//         // G·ª≠i y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
//         await sendPasswordResetEmail(auth, email);
//         alert("M√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞!");
//     } catch (error) {
//         console.error("L·ªói g·ª≠i m√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error.message);
//         alert("Kh√¥ng th·ªÉ g·ª≠i m√£. Vui l√≤ng ki·ªÉm tra l·∫°i email.");
//     }
// }
//
// window.confirmCode = async function (formData) {
//     const code = formData.get("confirmation code");
//
//     try {
//         // G·ª≠i m√£ x√°c nh·∫≠n l√™n Firebase
//         await applyActionCode(auth, code);
//         alert("X√°c nh·∫≠n th√†nh c√¥ng! ");
//
//     } catch (error) {
//         console.error("L·ªói x√°c nh·∫≠n m√£:", error.message);
//         alert("M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
//     }
// }
//
// window.confirmResetPassword = async function (formData) {
//     const newPassword = formData.get("new password");
//     const confirmPassword = formData.get("confirm new password");
//
//     if (newPassword !== confirmPassword) {
//         alert("M·∫≠t kh·∫©u kh√¥ng kh·ªõp. Vui l√≤ng nh·∫≠p l·∫°i.");
//         return;
//     }
//
//     try {
//         // G·ª≠i y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
//         await applyActionCode(auth, newPassword);
//         alert("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng! ");
//         window.location.href = "auth.html";
//     } catch (error) {
//         console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error.message);
//         alert("Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.");
//     }
// }
import { auth,
    createUserWithEmailAndPassword,
    applyActionCode,
    signInWithEmailAndPassword,
    sendPasswordResetEmail,
    verifyPasswordResetCode,
    confirmPasswordReset
} from "../../config/firebaseConfig.js";

// üõ†Ô∏è Hi·ªÉn th·ªã form t∆∞∆°ng ·ª©ng
window.showOnly = function (id) {
    const listForm = ['logInForm', 'signUpForm', 'resetPasswordForm'];
    listForm.forEach((form) => {
        document.getElementById(form).style.display = (form === id) ? 'block' : 'none';
    });
};

// üõ†Ô∏è X·ª≠ l√Ω submit form
document.addEventListener("DOMContentLoaded", function () {
    document.addEventListener("submit", async function (event) {
        event.preventDefault();
        let form = event.target;
        let formData = new FormData(form);

        switch (form.id) {
            case "logInForm":
                await logIn(formData);
                break;
            case "inputSignUpForm":
                confirmSignUp(); // Chuy·ªÉn form tr∆∞·ªõc
                requestSignUp(formData).then(); // Kh√¥ng ch·ªù ƒë·ª£i
                break;
            case "confirmSignUpForm":
                await confirmCodeSignUp(formData);
                break;
            case "inputEmailForm":
                switchForm(); // Chuy·ªÉn form tr∆∞·ªõc
                sendCode(formData).then(); // Kh√¥ng ch·ªù ƒë·ª£i
                break;
            case "confirmCodeForm":
                await confirmCode(formData);
                break;
            case "newPasswordForm":
                await confirmResetPassword(formData);
                break;
            default:
                console.warn("Form kh√¥ng x√°c ƒë·ªãnh:", form.id);
        }
    });
});

// üõ†Ô∏è Chuy·ªÉn form ƒëƒÉng k√Ω -> nh·∫≠p m√£ x√°c nh·∫≠n
window.confirmSignUp = function () {
    document.getElementById('inputSignUpForm').style.display = 'none';
    document.getElementById('confirmSignUpForm').style.display = 'block';
};

// üõ†Ô∏è Chuy·ªÉn form ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
window.switchForm = function () {
    const listFormResetPassword = ['inputEmailForm', 'confirmCodeForm', 'newPasswordForm'];
    for (let i = 0; i < listFormResetPassword.length; i++) {
        const curForm = document.getElementById(listFormResetPassword[i]);
        if (curForm && curForm.style.display !== 'none') {
            curForm.style.display = 'none';
            let nextForm = document.getElementById(listFormResetPassword[(i + 1) % listFormResetPassword.length]);
            if (nextForm) nextForm.style.display = 'block';
            break;
        }
    }
};

// üõ†Ô∏è ƒêƒÉng nh·∫≠p
window.logIn = async function (formData) {
    const email = formData.get("email");
    const password = formData.get("password");
    try {
        const userCredential = await signInWithEmailAndPassword(auth, email, password);
        console.log("ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", userCredential.user);
        alert(`Ch√†o m·ª´ng, ${userCredential.user.email}!`);
        window.location.href = "index.html";
    } catch (error) {
        console.error("L·ªói ƒëƒÉng nh·∫≠p:", error.message);
        alert("Sai email ho·∫∑c m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.");
    }
};

// üõ†Ô∏è ƒêƒÉng k√Ω t√†i kho·∫£n
window.requestSignUp = async function (formData) {
    const email = formData.get("email");
    const password = formData.get("password");
    const confirmPassword = formData.get("confirm password");

    if (password !== confirmPassword) {
        alert("M·∫≠t kh·∫©u kh√¥ng kh·ªõp. Vui l√≤ng nh·∫≠p l·∫°i.");
        return;
    }

    try {
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        console.log("User registered successfully:", userCredential.user);
        sendCode(email).then(); // Kh√¥ng ch·∫∑n UI
    } catch (error) {
        console.error("L·ªói ƒëƒÉng k√Ω:", error.message);
        alert("ƒêƒÉng k√Ω th·∫•t b·∫°i: " + error.message);
    }
};

// üõ†Ô∏è X√°c nh·∫≠n m√£ email ƒëƒÉng k√Ω
window.confirmCodeSignUp = async function (formData) {
    const code = formData.get("confirmation code");
    try {
        await applyActionCode(auth, code);
        alert("X√°c nh·∫≠n th√†nh c√¥ng! T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.");
        window.location.href = "auth.html";
    } catch (error) {
        console.error("L·ªói x√°c nh·∫≠n m√£:", error.message);
        alert("M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
    }
};

// üõ†Ô∏è G·ª≠i m√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
window.sendCode = async function (formData) {
    const email = formData.get("email");
    try {
        await sendPasswordResetEmail(auth, email);
        alert("M√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.");
    } catch (error) {
        console.error("L·ªói g·ª≠i m√£:", error.message);
        alert("Kh√¥ng th·ªÉ g·ª≠i m√£. Vui l√≤ng ki·ªÉm tra l·∫°i email.");
    }
};

// üõ†Ô∏è X√°c nh·∫≠n m√£ reset m·∫≠t kh·∫©u
window.confirmCode = async function (formData) {
    const code = formData.get("confirmation code");
    try {
        await verifyPasswordResetCode(auth, code);
        alert("M√£ h·ª£p l·ªá! Vui l√≤ng ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi.");
        switchForm(); // Chuy·ªÉn sang form ƒë·∫∑t m·∫≠t kh·∫©u
    } catch (error) {
        console.error("L·ªói x√°c nh·∫≠n m√£:", error.message);
        alert("M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
    }
};

// üõ†Ô∏è ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
window.confirmResetPassword = async function (formData) {
    const code = formData.get("confirmation code"); // üî• C·∫ßn l∆∞u m√£ tr∆∞·ªõc ƒë√≥ khi nh·∫≠p
    const newPassword = formData.get("new password");
    const confirmPassword = formData.get("confirm new password");

    if (newPassword !== confirmPassword) {
        alert("M·∫≠t kh·∫©u kh√¥ng kh·ªõp. Vui l√≤ng nh·∫≠p l·∫°i.");
        return;
    }

    try {
        await confirmPasswordReset(auth, code, newPassword);
        alert("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!");
        window.location.href = "auth.html";
    } catch (error) {
        console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error.message);
        alert("Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.");
    }
};
