import {
    auth,
    createUserWithEmailAndPassword,
    applyActionCode,
    signInWithEmailAndPassword,
    sendPasswordResetEmail,
    verifyPasswordResetCode,
    confirmPasswordReset,
    collection,
    query,
    where,
    db,
    doc,
    getDocs,
    setDoc
} from "../../config/firebaseConfig.js";

// üõ†Ô∏è Hi·ªÉn th·ªã form t∆∞∆°ng ·ª©ng
window.showOnly = function (id) {
    const listForm = ['logInForm', 'signUpForm', 'resetPasswordForm'];
    listForm.forEach((form) => {
        document.getElementById(form).style.display = (form === id) ? 'block' : 'none';
    });
};

// üõ†Ô∏è X·ª≠ l√Ω submit form
document.addEventListener("DOMContentLoaded", function () {
    document.addEventListener("submit", async function (event) {
        event.preventDefault();
        let form = event.target;
        let formData = new FormData(form);

        switch (form.id) {
            case "logInForm":
                await logIn(formData);
                break;
            case "inputSignUpForm":
                requestSignUp(formData).then(result => {
                if (result) {
                    confirmSignUp(); // Chuy·ªÉn form tr∆∞·ªõc
                }});
                break;
            case "confirmSignUpForm":
                await confirmCodeSignUp(formData);
                break;
            case "inputEmailForm":
                switchForm(); // Chuy·ªÉn form tr∆∞·ªõc
                sendCode(formData).then(); // Kh√¥ng ch·ªù ƒë·ª£i
                break;
            case "confirmCodeForm":
                await confirmCode(formData);
                break;
            case "newPasswordForm":
                await confirmResetPassword(formData);
                break;
            default:
                console.warn("Form kh√¥ng x√°c ƒë·ªãnh:", form.id);
        }
    });
});

// üõ†Ô∏è Chuy·ªÉn form ƒëƒÉng k√Ω -> nh·∫≠p m√£ x√°c nh·∫≠n
window.confirmSignUp = function () {
    document.getElementById('inputSignUpForm').style.display = 'none';
    document.getElementById('confirmSignUpForm').style.display = 'block';
};

// üõ†Ô∏è Chuy·ªÉn form ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
window.switchForm = function () {
    const listFormResetPassword = ['inputEmailForm', 'confirmCodeForm', 'newPasswordForm'];
    for (let i = 0; i < listFormResetPassword.length; i++) {
        const curForm = document.getElementById(listFormResetPassword[i]);
        if (curForm && curForm.style.display !== 'none') {
            curForm.style.display = 'none';
            let nextForm = document.getElementById(listFormResetPassword[(i + 1) % listFormResetPassword.length]);
            if (nextForm) nextForm.style.display = 'block';
            break;
        }
    }
};

window.checkEmailExists = async function (email) {
    const usersRef = collection(db, "users");
    const q = query(usersRef, where("email", "==", email));
    const querySnapshot = await getDocs(q);
    return !querySnapshot.empty; // Tr·∫£ v·ªÅ true n·∫øu email ƒë√£ t·ªìn t·∫°i
}

// üõ†Ô∏è ƒêƒÉng nh·∫≠p
window.logIn = async function (formData) {
    const email = formData.get("email");
    const password = formData.get("password");

    console.log(email, password);

    try {
        const userCredential = await signInWithEmailAndPassword(auth, email, password);
        alert(`ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Ch√†o m·ª´ng ${userCredential.user.email}`);
        window.location.href = "index.html";
    } catch (error) {
        if (error.code === "auth/wrong-password") {
            alert("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
        } else if (error.code === "auth/user-not-found") {
            alert("Email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω!");
        } else {
            alert("L·ªói ƒëƒÉng nh·∫≠p: " + error.message);
        }
    }
};

// üõ†Ô∏è ƒêƒÉng k√Ω t√†i kho·∫£n
window.requestSignUp = async function (formData) {
    const displayName = formData.get("displayName");
    const email = formData.get("email");
    const password = formData.get("password");
    const confirmPassword = formData.get("confirmPassword");

    if (password !== confirmPassword) {
        alert("M·∫≠t kh·∫©u kh√¥ng kh·ªõp. Vui l√≤ng nh·∫≠p l·∫°i.");
        return false;
    }

    if (await checkEmailExists(email)) {
        alert("Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
        return false;
    }

    try {
        const user = await createUserWithEmailAndPassword(auth, email, password);
        console.log("User registered successfully:", user.user);

        await setDoc(doc(db, "users", user.uid), {
            uid: user.uid,  // Gi·ªØ UID ngay trong document
            email: user.email,
            displayName: displayName,
            status: "online",
            createdAt: new Date().toISOString()
        });

        sendCode(formData).then(); // Kh√¥ng ch·∫∑n UI
    } catch (error) {
        console.error("L·ªói ƒëƒÉng k√Ω:", error.message);
        alert("ƒêƒÉng k√Ω th·∫•t b·∫°i: " + error.message);
    }
};

// üõ†Ô∏è X√°c nh·∫≠n m√£ email ƒëƒÉng k√Ω
window.confirmCodeSignUp = async function (formData) {
    const code = formData.get("confirmationCode");
    try {
        await applyActionCode(auth, code);
        alert("X√°c nh·∫≠n th√†nh c√¥ng! T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.");
        window.location.href = "auth.html";
    } catch (error) {
        console.error("L·ªói x√°c nh·∫≠n m√£:", error.message);
        alert("M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
    }
};

// üõ†Ô∏è G·ª≠i m√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
window.sendCode = async function (formData) {
    const email = formData.get("email");
    try {
        await sendPasswordResetEmail(auth, email);
        alert("M√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.");
    } catch (error) {
        console.error("L·ªói g·ª≠i m√£:", error.message);
        alert("Kh√¥ng th·ªÉ g·ª≠i m√£. Vui l√≤ng ki·ªÉm tra l·∫°i email.");
    }
};

// üõ†Ô∏è X√°c nh·∫≠n m√£ reset m·∫≠t kh·∫©u
window.confirmCode = async function (formData) {
    const code = formData.get("confirmationCode");
    try {
        await verifyPasswordResetCode(auth, code);
        alert("M√£ h·ª£p l·ªá! Vui l√≤ng ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi.");
        localStorage.setItem("resetCode", code); // üî• L∆∞u m√£ v√†o localStorage
        switchForm(); // Chuy·ªÉn sang form ƒë·∫∑t m·∫≠t kh·∫©u
    } catch (error) {
        console.error("L·ªói x√°c nh·∫≠n m√£:", error.message);
        alert("M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
    }
};


// üõ†Ô∏è ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
window.confirmResetPassword = async function (formData) {
    const code = formData.get("confirmationCode"); // üî• C·∫ßn l∆∞u m√£ tr∆∞·ªõc ƒë√≥ khi nh·∫≠p
    const newPassword = formData.get("newPassword");
    const confirmPassword = formData.get("confirmNewPassword");

    if (newPassword !== confirmPassword) {
        alert("M·∫≠t kh·∫©u kh√¥ng kh·ªõp. Vui l√≤ng nh·∫≠p l·∫°i.");
        return;
    }

    try {
        await confirmPasswordReset(auth, code, newPassword);
        alert("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!");
        window.location.href = "auth.html";
    } catch (error) {
        console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error.message);
        alert("Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.");
    }
};
